{"version":3,"sources":["components/Installation.js","components/HelloWorld.js","components/Comments.js","components/Variables.js","components/Numbers.js","components/Strings.js","components/Arrays.js","components/Conditionals.js","components/Loops.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Installation","id","Component","HelloWorld","Comments","Variables","Numbers","href","target","alt","Strings","Arrays","Conditionals","className","Loops","Main","MainWrapper","styled","div","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.687aebd7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from \"styled-components\";\n\nclass Installation extends Component {\n    render() {\n        return (\n            <div>\n                <h2 id=\"installation\">Installation</h2>\n                <p>Install XAMPP</p>\n                <p>Install PHP Intelephense by Ben Mewburn (for VSC)</p>\n                <p>run XAMMP and check localhost/dashboard for apache and localhost/myphpadmin for mysql (are they working?)</p>\n            </div>\n        );\n    }\n}\n\nexport default Installation;","import React, { Component } from 'react';\nimport styled from \"styled-components\";\n\nclass HelloWorld extends Component {\n    render() {\n        return (\n            <div>\n                <h2 id=\"hellowolrd\">Hello world</h2>\n                <p>First steps containning</p>\n                <code>\n                    \n                    echo \"Hello world\";\n                    \n                    </code>\n            </div>\n        );\n    }\n}\n\nexport default HelloWorld;","import React, { Component } from 'react';\n\nclass Comments extends Component {\n    render() {\n        return (\n            <div>\n                <h2 id=\"comments\">\n                    Comments\n                </h2>\n                <code>\n                // single line<br/>\n                # single line<br/><br/>\n                /* <br/>multiline<br/> */<br/>\n                </code>\n            </div>\n        );\n    }\n}\n\nexport default Comments;","import React, { Component } from 'react';\n\nclass Variables extends Component {\n    render() {\n        return (\n            <div>\n                <h2 id=\"variables\">\n                    Variables\n                </h2>\n                <p>Variabels naming: $ then letter or underscore then ev. numbers</p>\n                \n                <code><ul>object types:</ul>\n                <li>string - $name = \"Matt\"</li>\n                <li>integer - $age = 28</li>\n                <li>float/double - $height = 1.78</li>\n                <li>boolean - $isMale = true</li>\n                <li>null - $salary = null</li>\n                <li>array</li>\n                <li>object</li>\n                <li>resource</li>\n                </code>\n                <p>printing variable:</p> <code>echo $name;</code>\n                <p>with contacenation (use . )</p><code>echo $name.(html tag np. br)</code>\n                <p>When printing boolean false is converted to empty string, true to \"1\"</p>\n                <p>When printing null, null is converted to empty string</p>\n                <p>To print variable type, use <i>gettype</i> function</p>\n                <code>\n                    echo gettype($name)\n                </code>\n                <p>To print whole variable use <i>var_dump</i> function</p>\n                <code>\n                    var_dump($age);<br/>\n                    var_dump($name, $isMale, $sallary);\n                </code>\n                <p>To check variable:</p>\n                <code>is_string($name); //true<br/>\n                    is_int($name); //false <br/>\n                    is_bool($isMale); //true<br/>\n                    is_double($height) //true;\n                </code>\n                <p>To check if variable is defined</p>\n                <code>\n                    isset($name); //true <br/>\n                    isset($adress); //false\n                </code>\n                <h2 id=\"constants\">Constants</h2>\n                <p>To define constans:</p>\n                <code>\n                    define('Pi', 3.14); <br/>\n                    echo Pi;\n                </code>\n                <p>Using PHP built-in constants:</p>\n                <code>\n                    echo SORT_ASC; <br/>\n                    echo PHP_INT_MAX;\n\n                </code>\n            </div>\n        );\n    }\n}\n\nexport default Variables;","import React, { Component } from 'react';\n\nclass Numbers extends Component {\n    render() {\n        return (\n            <div>\n                <h2 id=\"numbers\">Numbers</h2>\n                <p>Declaring numbers:</p>\n                <code>\n                    $a = 5; <br/>\n                    $b = 6; <br/>\n                    $c = 5.2; <br/>\n                </code>\n                <p>Arythmetic operations:</p>\n                <code>\n                $a * $b; <br/>\n                $a % $c; <br/>\n                </code>\n                <p>Assigment with math operators:</p>\n                <code>\n                    $a += $b; // a = a + b<br/>\n                    $b *= $c; // b = b * c\n                </code>\n                <p>Increment operator:</p>\n                <code>\n                    $a++ // operation then incrementation <br/>\n                    ++$a // incrementation then operation\n                </code>\n                <p>Decrement operator:</p>\n                <code>\n                    $b-- // operation then decrementation <br/>\n                    --$b // dectrmentation then operation\n                </code>\n                <p>Numbers checking functions</p>\n                <code>\n                    is_float(1.25) // true <br/>\n                    is_double(1.25) // true <br/>\n                    is_int(5) // true <br/>\n                    is_numeric(\"3.45\") // true (because PHP cat recognize number in string) <br/>\n                    is_float(\"3g.45\") // false (because 3g.45 is not a number<br/>\n                </code>\n                <p>Conversion:</p>\n                <code>\n                $strNumber = \"12.45\"; <br/>\n                $number = (float)$strNumber; // convert to float value of 12.45<br/>\n                $iNumber = (int)$strNumber; convert to integer value of 12<br/>\n                $bNumber = boolval($strNumber); // boolean value of $strNumber (true)<br/>\n                ...floatval, intval, strval\n                </code>\n                <p>Number functions:</p>\n                <code>\n                    abs(-15); // absolute value of 15; <br/>\n                    pow(2,3); // 2 to the 3 power (8); <br/>\n                    ...sqrt, max, min, round, floor, ceil\n                </code>\n                <p>Formating numbers:</p>\n                <code>\n                $bigNumber = 123123123.123123; <br/>\n                echo number_format($bigNumber, 3, '.', \"-\"); // 123-123-123.123 <br/>\n                </code>\n                <br/>\n                <a href=\"https://www.php.net/manual/en/ref.math.php\" target=\"blank\" alt=\"link to more math functions\">more math functions</a>\n            </div>\n        );\n    }\n}\n\nexport default Numbers;","import React, { Component } from \"react\";\n\nclass Strings extends Component {\n  render() {\n    return (\n      <div>\n        <h2 id=\"strings\">Strings</h2>\n        <p>Creating strings:</p>\n        <code>\n          $name = \"Matt\"; <br />\n          $string1 = 'Hello $name'; // Hello $name (because of single quotation,\n          in sq you can't concatenate variables)\n          <br /> $string2 = \"Hello $name\"; // Hello Matt (because of double\n          quotation, in dq you can concatenate variables) <br />\n        </code>\n        <p>String concatenation:</p>\n        <code>echo 'Hello '.'Matt'; // Hello Matt</code>\n        <p>String functions:</p>\n        <code>\n          $string = \"&nbsp;&nbsp;&nbsp;&nbsp;Hello\n          Matt&nbsp;&nbsp;&nbsp;&nbsp;\"; <br />\n          ltrim($string); // \"Hello Matt&nbsp;&nbsp;&nbsp;&nbsp;\"\n          <br />\n          str_replace('Matt', 'Tom', $string); // Hello Tom (\"what to replace\",\n          \"with what\", where)\n          <br />\n          <br />\n          ...rtrim, str_word_count, strrev, strtoupper, strtolower, ucfirst,\n          lcfirst, ucwords, strpos, substr(where, start, length),\n          str_ireplace(ignores case), trim, strlen\n        </code>\n        <p>Multiline text and line breaks:</p>\n        <code>\n          $longString = \"Hello People\n          <br />\n          I am Matt,\n          <br />\n          I like pizza.\"; <br />\n          <br />\n          echo $longString; // Hello People I am Matt, I like pizza. <br />\n          <br />\n          echo nl2br($longString); // <br />\n          Hello People <br />\n          I am Matt <br />\n          I like pizza. <br /> (because of nl2br - New Line To &#60;BR&#62;)\n        </code>\n        <p>Long string and reserved html tags:</p>\n        <code>\n          $longString2 = \"Hello &#60;b&#62; People&#60;/b&#62;, \n          <br />\n          I am &#60;i&#62;Matt&#60;/i&#62;, <br />I like pizza.\";\n          <br/>\n          <br />\n          echo $$longString2; // Hello <b>People</b>, I am <i>Matt</i>, I like\n          pizza. (displays text with effective html tags) <br /><br/>\n          echo htmlentities($longString2); // Hello\n          &#60;b&#62;People&#60;/b&#62;, I am &#60;i&#62;Matt&#60;/i&#62;, I\n          like pizza. (displays text with inactive html tags (shows them)) <br/><br/>\n          echo nl2br(htmlentities($$longString2)) // will display text with inactive html tags changing new lines to &#60;BR&#62;\n          <br/>\n          <br/>\n          html_entity_decode('Hello&_#60;b&_#62; People&_#60;/b&_#62;'); // will decode html codes to: Hello <b>People</b>\n        </code><br/><br/>\n        <a href=\"https://www.php.net/manual/en/ref.strings.php\" target=\"blank\" alt=\"link to more math functions\">more math functions</a>\n      </div>\n    );\n  }\n}\n\nexport default Strings;\n","import React, { Component } from \"react\";\n\nclass Arrays extends Component {\n  render() {\n    return (\n      <div>\n        <h2 id=\"arrays\">Arrays</h2>\n        <p>Creating Arrays:</p>\n        <code>\n          $fruits = ['apple','pear', 'orange']; <br />\n          $colors = array('red', 'brown', 'black');\n          <br />\n        </code>\n        <p>Print the whole array:</p>\n        <code>\n          var_dump($fruits);\n          <br />\n          <br />\n          echo &#60;pre&#62;;\n          <br />\n          var_dump($colors);\n          <br />\n          echo &#60;/pre&#62;; // will display array in more readable format\n          because of &#60;pre&#62; tag<br/><br/>\n          print_r($fruits); // another way to print whole array\n        </code>\n        <p>Get element by index:</p>\n        <code>\n          $colors = array('red', 'brown', 'black');\n          <br />\n          echo $colors[1]; // brown\n        </code>\n        <p>Set element by index:</p>\n        <code>\n          $colors[1] = \"pink\";\n          <br />\n          echo $colors[1]; // pink\n        </code>\n        <p>Check if array has element at specifc index:</p>\n        <code>isset($fruits[2]); // true</code>\n        <p>Append element:</p>\n        <code>$fruits[] = \"kiwi\"; // will add kiwi at end of $fruits</code>\n        <p>Print the length of the array:</p>\n        <code>echo count($fruits); // 3</code>\n        <p>Add element at the end of the array:</p>\n        <code>array_push($fruits, \"tomato\");</code>\n        <p>Remove element from the end of the array:</p>\n        <code>array_pop($fruits);</code>\n        <p>Add element at the beginning of the array</p>\n        <code>array_unshift($fruits, 'grapes');</code>\n        <p>Remove element at the beginning of the array:</p>\n        <code>array_shift($fruits);</code>\n        <p>Split sthe string into an array:</p>\n        <code>\n          $string = \"Tom, Matt, Peter\";\n          <br />\n          <br />\n          echo &#60;pre&#62;;\n          <br />\n          var_dump(explode(\",\", $string));\n          <br />\n          echo &#60;/pre&#62;; // <br />\n          <br />\n          array(3) &#123;\n          <br />\n          [0]=&#62;\n          <br />\n          string(3) \"Tom\"\n          <br />\n          [1]=&#62;\n          <br />\n          string(5) \" Matt\"\n          <br />\n          [2]=&#62;\n          <br />\n          string(6) \" Peter\"\n          <br />\n          &#125;\n        </code>\n        <p>Combine array into a string:</p>\n        <code>echo implode(\"#\", $colors); // red#brown#pink</code>\n        <p>Check if element exist in the array:</p>\n        <code>\n          echo &#60;pre&#62;;\n          <br />\n          var_dump(in_array(\"tomato\", $fruits));\n          <br />\n          echo &#60;/pre&#62;; // bool(true)\n          <br />\n        </code>\n        <p>Search element index in the array:</p>\n        <code>\n          echo &#60;pre&#62;;\n          <br />\n          var_dump(array_search(\"tomato\", $fruits));\n          <br />\n          echo &#60;/pre&#62;; // int(3) (index of found element) <br />\n        </code>\n        <p>Merge two arrays:</p>\n        <code>\n          $boys = [\"tom\", \"peter\", \"matt\"];\n          <br />\n          $girls = [\"Agnes\", \"Karen\", \"Ann\"];\n          <br />\n          <br />\n          $children = array_merge($boys, $girls);\n          <br />\n          <br />\n          $joined = [...$colors, ...$fruits]; // merge with use of spread\n          operator\n        </code>\n        <p>\n          Associative arrays:\n        </p>\n        <code>\n          $person = [<br/>\n            'name' => \"Brad\", <br/>\n            'surname' => \"Patison\",<br/>\n            'age' => 30,<br/>\n            'hobbies' => ['rpg', 'tennis']<br/>\n          ]\n        </code>\n        <p>Acces element by key:</p>\n        <code>\n          $person['name'.'<br/>';]\n        </code>\n        <p>Set element by key:</p>\n        <code>\n          $person['car'] = 'Fiat';\n        </code>\n        <p>Null coalescing assignment operator (what a name!):</p>\n        <code>\n          if (!isset($person['address'])) &#123;<br/>\n\n            $person['address'] = 'unnknown';<br/>\n            &#125; <br/>// If there is no address set then address is equal \"unnknown\". If $person address is set, take value, if not address value is equal \"unnknown\". <br/><br/>\n            $person['address'] ??= 'unnknown'; <br/>// another way to set default walue if there is no address set\n\n        </code>\n        <p>Check if array has specific key:</p>\n        <code>\n          isset($person['address']); \n        </code>\n        <p>Print the keys of the array:</p>\n        <code>\n          array_keys($person);\n        </code>\n        <p>Print the values of the array:</p>\n        <code>\n          array_values($person);\n        </code>\n        <p>Sorting associative arrays by keys / values:</p>\n        <code>\n          ksort($person); // will sort associative array alphabeticaly by keys<br/>\n          <br/>\n          asort($person); // will sort associative array alphabeticaly by values\n        </code>\n          <p>Two dimensional arrays:</p>\n          <code>\n            $todos = [<br/>\n              [\"title\" => \"todo title 1\", \"completed\" => true]<br/>\n              [\"title\" => \"todo title 2\", \"completed\" => false]<br/>\n            ]\n          </code>\n      </div>\n    );\n  }\n}\n\nexport default Arrays;\n","import React, { Component } from \"react\";\n\nclass Conditionals extends Component {\n  render() {\n    return (\n      <div>\n        <h2 id=\"conditionals\">Conditionals</h2>\n        <p>if:</p>\n        <code>\n          if ($age === 18) &#123;\n          <br />\n          echo \"1\";\n          <br />\n          &#125; // if age is equal 18, print 1\n          <br />\n          <br />\n          if ($age === 18) echo \"1\"; // another way to do the same\n        </code>\n        <p>if-else:</p>\n        <code>\n          if ($age > 18) &#123; <br />\n          echo \"1\"; <br />\n          &#125; else &#123;\n          <br />\n          echo \"2\";\n          <br />\n          &#125; // if age is greater then 18 print 1 in another case print 2\n        </code>\n        <p>Difference between === and ==:</p>\n        <codde>\n          $age = 20;\n          <br />\n          <br />\n          if ($age == 20); <br />\n          if ($age == \"20\"); // both are true bacouse i am comparing only values\n          (20)\n          <br />\n          <br />\n          if ($age === \"20\"); // will be false bacouse i am comparing values and\n          type of $age\n          <br />\n          <br />\n          $age == 20; // true;\n          <br />\n          $age == '20'; // true;\n          <br />\n          $age === 20; // true;\n          <br />\n          $age === '20'; // false;\n          <br />\n        </codde>\n        <p>if AND:</p>\n        <code>\n          $age = 20;\n          <br />\n          $salary = 500;\n          <br />\n          <br />\n          if ($age > 20 && $salary === 500) &#123;\n          <br />\n          echo \"do something\";\n          <br />\n          &#125; // nothing will hepend bacouse only one condition is true\n        </code>\n        <p>if OR:</p>\n        <code>\n          if ($age > 20 || $salary === 500) &#123;\n          <br />\n          echo \"do something\";\n          <br />\n          &#125; // \"do something\" will be preinted bacouse $age OR $salary are\n          true\n        </code>\n        <p>\n            Ternary if:\n        </p>\n        <code>\n            echo $age &#60;\n 21 ? 'young' : 'not so young'; // will print 'young' bacouse age is less than 21 ($age = 20)\n        </code>\n        <p>Short ternary:</p>\n        <code>\n            $myAge = $age ?: 18; // if $age is not exist will create $myAge variable with value 18\n        </code>\n        <p>Null coalescing operator:</p>\n        <code>\n            $myName = isset($name) ? $name : 'Matt'; // if there is no $name variable (or it's value is equal 0) create variable $myName with value 'Matt';<br/>\n            <br/>\n            $myAge = $age ?? 130; // will create $myAge variable with value 130 if there is no $age\n        </code>\n        <p>Switch:</p>\n        <code>\n            $userRole = 'admin';<br/>\n        <br/>\n            switch ($userRole) &#123;<br/>\n\n            case 'admin':<br/>\n                <span className=\"tab\">echo 'admin';</span><br/>\n                <span className=\"tab\">break;</span><br/>\n            case 'editor':<br/>\n            <span className=\"tab\">echo 'editor';</span><br/>\n            <span className=\"tab\">break;</span><br/>\n            default:<br/>\n            <span className=\"tab\">echo 'invalid role';</span><br/>\n                &#125; // case 'admin' will be executed and 'admin' will be printed, bacouse $userRole = 'admin'. If $userRole = 'webadmin', 'invalid user' will be printed bacouse there is no match for any case.\n\n        </code>\n      </div>\n    );\n  }\n}\n\nexport default Conditionals;\n","import React, { Component } from 'react';\n\nclass Loops extends Component {\n    render() {\n        return (\n            <div>\n                <h2 id=\"loops\">Loops</h2>\n                <p></p>\n            </div>\n        );\n    }\n}\n\nexport default Loops;","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport Installation from \"./Installation\";\nimport HelloWorld from \"./HelloWorld\";\nimport Comments from \"./Comments\";\nimport Variables from \"./Variables\";\nimport Numbers from \"./Numbers\";\nimport Strings from \"./Strings\";\nimport Arrays from \"./Arrays\";\nimport Conditionals from \"./Conditionals\";\nimport Loops from \"./Loops\";\n\nclass Main extends Component {\n  render() {\n    return (\n      <MainWrapper>\n        <h1>My PHP adventures</h1>\n        <ul>\n          <a href=\"#installation\">\n            <li>Installation</li>\n          </a>\n          <a href=\"#helloworld\">\n            <li>Hello World</li>\n          </a>\n          <li><a href=\"#comments\">Comments</a><span className=\"subLinks\"> (single line, multiline)</span></li>\n          \n            <li><a href=\"#variables\">Variables</a><span className=\"subLinks\"> (naming, printing, contacenation, printing boolean, printing null, print variable type, print whole variable, check variable, check if variable is defined)</span></li>\n          \n            <li><a href=\"#constants\">Constants</a><span className=\"subLinks\"> (define, build-in constants)</span></li>\n            <li><a href=\"#numbers\">Numbers</a><span className=\"subLinks\"> (declaring, arythmetic operations, assigments by math operators, increment operator, decrement operator, number checking functions, conversion, number functions, formating, more)</span></li>\n          \n            <li><a href=\"#strings\">Strings</a><span className=\"subLinks\"> (creating, concatenation, string functions, multiline text, line breaks, long strings, reserved html tags)</span></li>\n          <li><a href=\"#arrays\">Arrays</a><span className=\"subLinks\"> (create, print, get el, set el, check is there specific index, append el, print length, add el at end, remove el at end, add el at beginning, remove el at beginning, string into array, array into string, search el index in array, merge, associative arrays, acces el by key, set el by key, null coalescing assignment operator, check if array has specific key, print keys, print values, sort associative arrays by keys / values, two dimensional arrays)</span></li>\n          <li><a href=\"#conditionals\">Conditionals</a><span className=\"subLinks\"> (if, if-else, == / ===, if AND, if OR, ternary operator, short ternary, null coalescing operator, switch)</span></li>\n          <li><a href=\"#loops\">Loops</a><span className=\"subLinks\"> (if, if-else, == / ===, if AND, if OR, ternary operator, short ternary, null coalescing operator, switch)</span></li>\n        </ul>\n\n        <Installation />\n        <HelloWorld />\n        <Comments />\n        <Variables />\n        <Numbers />\n        <Strings />\n        <Arrays />\n        <Conditionals />\n        <Loops />\n      </MainWrapper>\n    );\n  }\n}\n\nexport const MainWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n  margin: 0 auto;\n  width: 60%;\n  margin-bottom: 3rem;\n\n  h1 {\n    text-align: center;\n  }\n`;\n\nexport const ListOfContentWrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n  justify-content: flex-start;\n  flex-direction: column;\n  list-style: none;\n  margin: 0 auto;\n\n  p {\n    text-decoration: none;\n    font-size: 1.5rem;\n  }\n`;\n\nexport default Main;\n","import './App.css';\nimport Main from \"./components/Main\"\nimport styled from \"styled-components\";\n\n\n\nfunction App() {\n  return (\n    <inAppWrapper>\n    <Main />\n    \n    </inAppWrapper>\n  );\n}\n\n\nexport const inAppWrapper = styled.div`\nwidth: 60%;\nmargin: 0 auto;\n`;\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}